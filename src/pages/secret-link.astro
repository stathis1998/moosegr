---
import ChatLayout from '../layouts/ChatLayout.astro';
---

<ChatLayout title='Moose Software Solutions - ðŸ¤«ðŸ¤«'>
  <h1 class="text-center text-xl">Totally not a cover - Shhh... ðŸ¤«ðŸ¤«</h1>

  <div class="h-full bg-gray-900 p-6 flex flex-col justify-between text-gray-200">
    <div id="chatbox" class="bg-gray-800 flex-1 flex flex-col overflow-y-auto space-y-4 p-6">
      <!-- <div class="self-start bg-gray-700 text-gray-300 rounded-br-lg rounded-tr-lg rounded-tl-lg max-w-2/3 p-3">
        User Message
      </div>
      
      <div class="self-end bg-gray-700 text-white rounded-bl-lg rounded-tl-lg rounded-tr-lg max-w-2/3 p-3">
        AI Response
      </div> -->
    </div>

    <div class="mt-4">
      <textarea rows="5" class="w-full p-3 bg-gray-800 focus:outline-none focus:ring focus:ring-gray-600 placeholder-gray-500 text-white resize-none" placeholder="Type your message..." />
    </div>
  </div>
</ChatLayout>

<script>
  const chatbox = document.querySelector('#chatbox');
  const input = document.querySelector('textarea');

  let messages: {
    role: "user" | "assistant",
    content: string
  }[] = [];

  function addMsg(msg: {
    role: "user" | "assistant",
    content: string
  }) {
    messages.push(msg);
  }

  function fetchData() {
    // Your API Endpoint (Make sure to read OpenAI docs to use the right endpoint)
    const API_ENDPOINT = 'https://api.openai.com/v1/chat/completions';

    // Your API Key (Keep this secret! Don't expose it in client-side code in real implementations)
    const API_KEY = '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';

    fetch(API_ENDPOINT, {
        method: 'POST',
        headers: {
            'Authorization': `Bearer ${API_KEY}`,
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            max_tokens: 4000,
            model: "gpt-4",
            temperature: 0.7,
            messages: messages,
        })
    })
    .then(response => response.json())
    .then(data => {
        const message = document.createElement('div');
        message.classList.add('self-start', 'bg-gray-700', 'text-white', 'rounded-br-lg', 'rounded-tl-lg', 'rounded-tr-lg', 'max-w-2/3', 'p-3', 'assistant');
        message.innerText = data.choices[0].message.content;
        if (chatbox) {
          chatbox.appendChild(message);
          chatbox.scrollTop = chatbox.scrollHeight;
        }

        addMsg({
          role: 'assistant',
          content: message.innerText
        });
    })
    .catch(error => {
        console.error('Error fetching data:', error);
    });
  }

  if (input && chatbox) {
    input.focus();
    input.addEventListener('keydown', function(e) {
      if (e.key === 'Enter' && !e.shiftKey) {
        if (!input.value.trim()) {
          return;
        }
        e.preventDefault();
        const message = document.createElement('div');
        message.classList.add('self-end', 'bg-gray-700', 'text-white', 'rounded-bl-lg', 'rounded-tl-lg', 'rounded-tr-lg', 'max-w-2/3', 'p-3', 'user');
        message.innerText = input.value;
        input.value = '';
        chatbox.appendChild(message);
        chatbox.scrollTop = chatbox.scrollHeight;

        addMsg({
          role: 'user',
          content: message.innerText
        });

        fetchData();
      }
    });
  }
</script>

<style>
  .user {
    border: 2px solid blue;
  }

  .assistant {
    border: 2px solid green;
  }
</style>